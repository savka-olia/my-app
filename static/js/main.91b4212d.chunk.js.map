{"version":3,"sources":["components/signup.component.hooks.js","components/header.component.js","App.js","serviceWorker.js","index.js"],"names":["onSubmit","formData","audio","Audio","src","loop","volume","load","play","window","open","SignUp","useForm","register","handleSubmit","errors","watch","className","type","name","placeholder","ref","required","value","message","firstName","lastName","htmlFor","pattern","email","minLength","maxLength","password","validate","compare","passwordConfirm","Header","to","App","basename","process","render","location","exact","path","component","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.91b4212d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\n\n\nfunction onSubmit(formData) {\n  const audio = new Audio(); audio.src = 'https://drive.google.com/uc?export=download&id=1_4h7jTNvaw2mfpAB9BLevaMfmoj7Nx-J';\n            audio.loop = true; audio.volume = 0.25; audio.load(); audio.play();\n  return (window.open(\"https://bit.ly/2DjJB7k\"));\n\n\n}\n\nconst SignUp = () => {\n  const { register, handleSubmit, errors, watch } = useForm();\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} >\n      <h3>Sign Up</h3>\n\n      <div className=\"form-group\"> \n        <label>First name</label>\n        <input type=\"text\"\n          name=\"firstName\"\n          className=\"form-control\"\n          placeholder=\"First name\"\n          ref={register({\n            required: {\n              value: true,\n              message: \"First Name is required\",\n            }\n          })} />\n        {errors.firstName &&\n          <div className='error text-danger text-center'>\n            {errors.firstName.message}\n          </div>\n        }\n      </div>\n\n      <div className=\"form-group\">\n        <label>Last name</label>\n        <input type=\"text\"\n          name=\"lastName\"\n          className=\"form-control\"\n          placeholder=\"Last name\"\n          ref={register({\n            required: {\n              value: true,\n              message: \"Last Name is required\",\n            }\n          })}\n        />\n        {errors.lastName &&\n          <div className='error text-danger text-center'>\n            {errors.lastName.message}\n          </div>}\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"email\">Email</label>\n        <input type='email'\n          name='email'\n          className=\"form-control\"\n          placeholder=\"Enter email\"\n          ref={register({\n            required: {\n              value: true,\n              message: \"Email is required\"\n            },\n            pattern: {\n              value: /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/,\n              message: \"Email is incorrect\"\n            }\n\n          })\n          }\n        />\n        {errors.email &&\n          <div className='error text-danger text-center'>\n            {errors.email.message}\n          </div>}\n\n      </div>\n\n      <div className='form-group'>\n        <label htmlFor=\"password\">Password</label>\n        <input type='password' name='password' className=\"form-control\"\n          placeholder=\"Enter password\"\n          ref={register({\n            required: {\n              value: true,\n              message: \"Password is required\"\n            },\n            minLength: {\n              value: 8,\n              message: \"Password min Length - 8 characters\"\n            },\n            maxLength: {\n              value: 64,\n              message: \"Password max Length - 64 characters  \"\n            },\n            pattern: {\n              value: /(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8}/,\n              message: \"Password must contain at least 1 Uppercase, 1 Lowercase and 1 Number\"\n            }\n\n\n          })\n          }\n        />\n\n        {errors.password &&\n          <div className='error text-danger text-center'>\n            {errors.password.message}\n          </div>\n        }\n\n\n      </div>\n\n      <div className=\"form-group\">\n        <label>Confirm Password</label>\n        <input type=\"password\"\n          name=\"passwordConfirm\"\n          placeholder=\"Enter password\"\n          className=\"form-control\"\n          placeholder=\"Confirm password\"\n          ref={register({\n            required: {\n              value: true,\n              message: \"Password is required\"\n            },\n            minLength: {\n              value: 8,\n              message: \"Password min Length - 8 characters\"\n            },\n            maxLength: {\n              value: 64,\n              message: \"Password max Length - 64 characters  \"\n            },\n            pattern: {\n              value: /(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8}/,\n              message: \"Password must contain at least 1 Uppercase, 1 Lowercase and 1 Number\"\n            },\n            validate: {\n              compare: (value) => {\n                const result = value === watch(\"password\");\n                return result || \"Password did not match\"\n              }\n            }\n\n          })\n          }\n        />\n        {errors.passwordConfirm &&\n          <div className='error text-danger text-center'>\n            {errors.passwordConfirm.message}\n          </div>\n        }\n      </div>\n\n      <button type=\"submit\" className=\"btn btn-primary btn-block\">Sign Up</button>\n    </form>\n    \n  );\n}\n\nexport default SignUp","import React from \"react\";\nimport { BrowserRouter as Link } from \"react-router-dom\";\n// import ReactPasswordStrength from \"react-password-strength\"\n\nconst Header = () => {\n        return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div className=\"container\">\n            <Link className=\"navbar-brand\" to={\"https://bit.ly/3f1wfcu\"}>\n                <div className=\"text-black\">JSP Summer Camp 2020</div>\n            </Link>\n        </div>\n    </nav>\n        )\n}\nexport default Header","import React from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport SignUp from \"./components/signup.component.hooks\";\nimport Header from \"./components/header.component\";\n\nconst App = () => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n    <Route render = {({ location }) => (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path='/' component={Header} />\n      </Switch>\n      <div className=\"auth-wrapper\">\n        <div className=\"auth-inner\">\n          <Switch>\n            <Route exact path='/' component={SignUp} />\n          </Switch>\n        </div>\n      </div>\n    </div>)} />\n  </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}